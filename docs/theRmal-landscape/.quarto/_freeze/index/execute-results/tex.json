{
  "hash": "42cbe94f37bc4ef05f29289c0abbc1dd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Variation in thermal pressures and resource availability drives disease dynamics \nformat: \n  pdf:\n    toc: true\n    number-sections: true\n    colorlinks: true\nauthors:\n  - name: Cole Brookson\n    affiliation: Yale University\n    roles: conceptualization, writing, analysis\n    corresponding: true\n  - name: David Vasseur\n    affiliation: Yale University \n    roles: conceptualization, writing, analysis\n    corresponding: false\nbibliography: theRmal-landscape.bib\n---\n\n\n## Model\n\n@vintonResourceLimitationDetermines2022 provide a basic model for temperature-dependent consumer-resource dynamics with a chemostat model of resource, $R$, supply, given by \n\n\\begin{equation}\n\\label{eq:resource-growth}\n\\frac{dR}{dt} = D(S-R) - f(R,T)C,\n\\end{equation}\n\nwhere there is an inflow density $S$ and an outflow rate $D$ and $f(R,T)$ i the functional response of $R$ with respect to temperature $T$. The biomass change of the consumer $C$ is given by \n\n\\begin{equation}\n\\label{eq:consumer-growth}\n\\frac{dC}{dt} = (1 - \\delta)f(R,T) - m(T)C,\n\\end{equation}\n\nwhere $(1-\\delta)$ is the consumption efficiency (denoted as a fraction), and $m$ is the rate of respiration. We assume a Boltzmann-Arrhenius relationship and approximate that function $m(T)$ with \n\n\\begin{equation}\n\\label{eq:respiration-rate}\nm(T) = m_ae^{m_bT} + m_c,\n\\end{equation}\n\nwith $m_a$, $m_b$ and $m_c$ all $>0$. The functional response is a standard type II, with attack rate $a$, handling rate $(1/h)$, but re-state according to the Michaelis-Menten form of \n\n\\begin{equation}\n\\label{eq:functional-response}\nf(R,T) = I_{max}(T) \\times \\frac{R}{R + R_{\\text{half}}},\n\\end{equation}\n\nand $I_{max}T$ is the maximum uptake rate which we state as equivalent to the handling rate $I_{max}T \\equiv 1/h$, and then the half-saturation density is made equivalnt via $R_{\\text{half}} \\equiv \\frac{1}{a \\times h}$. Note that the resource saturation is reached by $R / (R_{\\text{half}} + R)$, which is independent of $I_{max}$. Last, \n\n\\begin{equation}\n\\label{eq:i-max}\nI_{max}(T) = e^{-(T-T_I)^2\\gamma},\n\\end{equation}\n\nis the equation governing the relationship with temperature, where $T_I$ is the optimum temperature for consumption, and $\\gamma$ is the breadth of response. \n\n### Equilibrium Solutions \n\n@vintonResourceLimitationDetermines2022 showed that there is a coexistence equilibrium solution where \n\n\\begin{equation}\n\\label{eq:r-equil}\nR_e = \\frac{m R_\\text{half}}{(1-\\delta)I_{max}(T) - m},\n\\end{equation} \n\nand \n\n\\begin{equation}\n\\label{eq:c-equil}\nC_e = \\frac{D(S-R_e)(R_e - R_\\text{half})}{I_{max}(T)R_e},\n\\end{equation} \n\n### Brute-force Computation\n\nWe use the standard set of model parameters for the chemostat dynamics, $R_\\text{half} = 2, T_I = 25, \\gamma = 150, m_a = 0.01, m_b = 0.1, m_c = 0.05, D = 1, S = 1$. \n\nWith these values, we set up a brute-force computation that draws values of R\n\nHere's a single run for R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the deSolve package\nlibrary(deSolve)\nlibrary(ggplot2)\nlibrary(magrittr)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\n# Define the differential equations\nconsumer_resource_model <- function(time, state, parameters) {\n    R <- state[1]\n    C <- state[2]\n    T <- parameters[\"T\"]\n    D <- parameters[\"D\"]\n    S <- parameters[\"S\"]\n    delta <- parameters[\"delta\"]\n    m_a <- parameters[\"m_a\"]\n    m_b <- parameters[\"m_b\"]\n    m_c <- parameters[\"m_c\"]\n    a <- parameters[\"a\"]\n    h <- parameters[\"h\"]\n    e <- parameters[\"e\"]\n    gamma <- parameters[\"gamma\"]\n    T_I <- parameters[\"T_I\"]\n    R_half <- parameters[\"R_half\"]\n\n    # Functional response f(R, T)\n    I_max_T <- exp(-(T - T_I)^2 * gamma)\n    f_R_T <- I_max_T * R / (R + R_half)\n\n    # Respiration rate m(T)\n    m_T <- m_a * exp(m_b * T) + m_c\n\n    # Differential equations\n    dR_dt <- D * (S - R) - f_R_T * C\n    dC_dt <- (1 - delta) * f_R_T - m_T * C\n\n    return(list(c(dR_dt, dC_dt)))\n}\n\n# Define the parameters\nparameters <- c(\n    T = rnorm(1, mean = 25, sd = 1), # Random normal temperature\n    D = 1, # Outflow rate\n    S = 2, # Inflow resource density\n    delta = 0.2, # Consumption efficiency\n    e = 0.5,\n    m_a = 0.01,\n    m_b = 0.1,\n    m_c = 0.05,\n    a = 0.5, # Attack rate\n    h = 0.1, # Handling rate\n    gamma = 150, # Breadth of response\n    T_I = 25, # Optimum temperature for consumption\n    R_half = 0.5 # Half-saturation density\n)\n\n# Define initial conditions for R and C\nstate <- c(R = 0.2, C = 0.5)\n\n# Set time points for the simulation\ntimes <- seq(0, 100, by = 0.1)\n\n# Run the simulation using deSolve's ode function\noutput <- data.frame(deSolve::ode(\n    y = state, times = times,\n    func = consumer_resource_model,\n    parms = parameters\n)) |>\n    tidyr::pivot_longer(\n        cols = c(R, C),\n        names_to = \"spp\"\n    )\n\n\n# Plot the results\nggplot2::ggplot(\n    data = output\n) +\n    geom_line(aes(x = time, y = value, colour = spp)) +\n    theme_bw() +\n    theme(\n        text = element_text(size = 18),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.background = element_blank()\n    ) +\n    labs(x = \"Time\", y = \"Density\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-1-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nNow we do it drawing distributions and we can look at the equilibrium conditions: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plot3D)\nlibrary(reshape2)\nlibrary(plotly)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'plotly'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n\n\n:::\n\n```{.r .cell-code}\nconsumer_equil_resource_model <- function(time, state, parameters) {\n    R <- state[1]\n    C <- state[2]\n    T <- parameters[\"T\"]\n    D <- parameters[\"D\"]\n    S <- parameters[\"S\"]\n    delta <- parameters[\"delta\"]\n    m_a <- parameters[\"m_a\"]\n    m_b <- parameters[\"m_b\"]\n    m_c <- parameters[\"m_c\"]\n    a <- parameters[\"a\"]\n    h <- parameters[\"h\"]\n    gamma <- parameters[\"gamma\"]\n    T_I <- parameters[\"T_I\"]\n    R_half <- parameters[\"R_half\"]\n\n    # Functional response f(R, T)\n    I_max_T <- exp(-(T - T_I)^2 * gamma)\n    f_R_T <- I_max_T * R / (R + R_half)\n\n    # Respiration rate m(T)\n    m_T <- m_a * exp(m_b * T) + m_c\n\n    # Differential equations\n    dR_dt <- D * (S - R) - f_R_T * C\n    dC_dt <- (1 - delta) * f_R_T - m_T * C\n\n    return(list(c(dR_dt, dC_dt)))\n}\n\n# Define the parameter ranges (means and sds for S and T)\nS_mean <- 1.5\nS_sd <- 0.2\nT_mean <- 20\nT_sd <- 1.5\n\n# Set other model parameters (fixed values)\nparameters_base <- c(\n    D = 0.1, # Outflow rate\n    delta = 0.2, # Consumption efficiency\n    m_a = 0.1,\n    m_b = 0.05,\n    m_c = 0.02,\n    a = 0.5, # Attack rate\n    h = 0.1, # Handling rate\n    gamma = 0.05, # Breadth of response\n    T_I = 20, # Optimum temperature for consumption\n    R_half = 0.1 # Half-saturation density\n)\n\n# Define initial conditions for R and C\nstate <- c(R = 1, C = 0.5)\n\n# Time points for the simulation\ntimes <- seq(0, 500, by = 0.1) # Extended time for equilibrium\n\n# Number of draws for S and T\nnum_draws <- 1000\n\n# Storage for equilibrium C values, and the corresponding T and S values\nresults <- data.frame(\n    S = numeric(num_draws),\n    T = numeric(num_draws),\n    C = numeric(num_draws)\n)\n\n# Run the simulation for each draw\nfor (i in 1:num_draws) {\n    # Draw random values for S and T from normal distributions\n    parameters <- parameters_base\n    parameters[\"S\"] <- rnorm(1, mean = S_mean, sd = S_sd)\n    parameters[\"T\"] <- rnorm(1, mean = T_mean, sd = T_sd)\n\n    # Run the simulation\n    output <- ode(y = state, times = times, \n    func = consumer_resource_model, parms = parameters)\n\n    # Store the final values of S, T, and the equilibrium value of C\n    results$S[i] <- parameters[\"S\"]\n    results$T[i] <- parameters[\"T\"]\n    results$C[i] <- tail(output[, \"C\"], n = 1) # Equilibrium value of C\n}\n\n# Plot the relationship between C and T\nggplot(results, aes(x = T, y = C)) +\n    geom_point() +\n    geom_smooth(method = \"loess\", se = FALSE) +\n    labs(x = \"Temperature (T)\", y = \"Consumer Biomass (C)\") +\n    theme_bw() +\n    theme(\n        text = element_text(size = 18),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.background = element_blank()\n    )\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-2-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Plot the relationship between C and S\nggplot(results, aes(x = S, y = C)) +\n    geom_point() +\n    geom_smooth(method = \"loess\", se = FALSE) +\n    labs(x = \"Resource Inflow (S)\", y = \"Consumer Biomass (C)\") +\n    theme_bw() +\n    theme(\n        text = element_text(size = 18),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.background = element_blank()\n    )\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-2-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nggplot(results)  + \n    geom_histogram(aes(x = C), fill = \"blue\") + \n    theme_bw() +\n    theme(\n        text = element_text(size = 18),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.background = element_blank()\n    )\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-2-3.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# 3D plot of C with respect to both T and S\nscatter3D(\n    x = results$T, y = results$S, z = results$C,\n    pch = 19, cex = 1.2, colkey = TRUE,\n    main = \"3D plot of C vs T and S\",\n    xlab = \"Temperature (T)\", ylab = \"Resource Inflow (S)\", \n    zlab = \"Consumer Biomass (C)\",\n    theta = 40, phi = 20\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-2-4.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# # Create a 2D grid of T and S\n# plot_matrix <- t(reshape2::acast(results, S~T, value.var=\"C\"))\n# d_df <- as.matrix(results[, c(\"C\", \"S\", \"T\")], rownames.force = NA)\n# plot_ly(z=~d_df) %>% add_surface()\n\n# plotly::plot_ly(\n#       z=~d_df\n#     ) %>% \n#   add_surface() %>%\n#   layout(\n#     title = \"\",\n#     scene = list(\n#       xaxis = list(title = \"S\"),\n#       yaxis = list(title = \"T\"),\n#       zaxis = list(title = \"C\"),\n#       camera = list(eye = list(x = 1.95, y = -1.25, z = 1.25))\n#     ))\n```\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}